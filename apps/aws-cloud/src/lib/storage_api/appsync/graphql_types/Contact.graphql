
type Contact {
  id: ID!
  fullName: String
  email: String
  message: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateContactInput {
  fullName: String
  email: String
  message: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateContactInput {
  id: ID!
  fullName: String
  email: String
  message: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteContactInput {
  id: ID!
}

type Query {
    getContact(id: ID!): Contact
    
    queryContacts(
        limit: Int, 
        nextToken: String, 
        includeDeleted: Boolean = false,  # ✅ Allow fetching soft-deleted records only when explicitly requested
        filters: ContactFilterInput
    ): [Contact]
    }

    input ContactFilterInput {
    field: String
    value: String
    operator: String
}
    
type Mutation {
    putContact(input: CreateContactInput!): Contact
    updateContact(input: UpdateContactInput!): Contact
    # ✅ Soft Delete - Marks `isDeleted = true`
    softDeleteContact(input: SoftDeleteContactInput!): Contact
        # @aws_auth(cognito_groups: ["SUPERADMIN", "ADMIN"])

    # ❌ Hard Delete - Restricted to SUPERADMIN Only
    deleteContact(id: ID!): Contact
        # @aws_auth(cognito_groups: ["SUPERADMIN"])
}
    
type Subscription {
    onPutContact: Contact @aws_subscribe(mutations: ["putContact"])
    onUpdateContact: Contact @aws_subscribe(mutations: ["updateContact"])
    onSoftDeleteContact: Contact @aws_subscribe(mutations: ["softDeleteContact"])
}
    