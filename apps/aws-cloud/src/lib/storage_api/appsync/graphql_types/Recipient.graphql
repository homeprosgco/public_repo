
type Recipient {
  id: ID!
  fullName: String
  phoneNumber: String
  address: String
  email: String
  type: String
  additionalInfo: String
  tags: [String]
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateRecipientInput {
  fullName: String
  phoneNumber: String
  address: String
  email: String
  type: String
  additionalInfo: String
  tags: [String]
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateRecipientInput {
  id: ID!
  fullName: String
  phoneNumber: String
  address: String
  email: String
  type: String
  additionalInfo: String
  tags: [String]
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteRecipientInput {
  id: ID!
}

type Query {
    getRecipient(id: ID!): Recipient
    
    queryRecipients(
        limit: Int, 
        nextToken: String, 
        includeDeleted: Boolean = false,  # ✅ Allow fetching soft-deleted records only when explicitly requested
        filters: RecipientFilterInput
    ): [Recipient]
    }

    input RecipientFilterInput {
    field: String
    value: String
    operator: String
}
    
type Mutation {
    putRecipient(input: CreateRecipientInput!): Recipient
    updateRecipient(input: UpdateRecipientInput!): Recipient
    # ✅ Soft Delete - Marks `isDeleted = true`
    softDeleteRecipient(input: SoftDeleteRecipientInput!): Recipient
        # @aws_auth(cognito_groups: ["SUPERADMIN", "ADMIN"])

    # ❌ Hard Delete - Restricted to SUPERADMIN Only
    deleteRecipient(id: ID!): Recipient
        # @aws_auth(cognito_groups: ["SUPERADMIN"])
}
    
type Subscription {
    onPutRecipient: Recipient @aws_subscribe(mutations: ["putRecipient"])
    onUpdateRecipient: Recipient @aws_subscribe(mutations: ["updateRecipient"])
    onSoftDeleteRecipient: Recipient @aws_subscribe(mutations: ["softDeleteRecipient"])
}
    