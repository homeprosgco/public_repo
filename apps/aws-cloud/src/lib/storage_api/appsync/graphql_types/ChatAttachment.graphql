
type ChatAttachment {
  id: ID!
  chatMessageId: ID!
  fileURL: String
  fileType: String
  chatMessage: String
  messengerIds: [String]
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateChatAttachmentInput {
  chatMessageId: ID!
  fileURL: String
  fileType: String
  chatMessage: String
  messengerIds: [String]
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateChatAttachmentInput {
  id: ID!
  chatMessageId: ID!
  fileURL: String
  fileType: String
  chatMessage: String
  messengerIds: [String]
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteChatAttachmentInput {
  id: ID!
}

type Query {
    getChatAttachment(id: ID!): ChatAttachment
    
    queryChatAttachments(
        limit: Int, 
        nextToken: String, 
        includeDeleted: Boolean = false,  # ✅ Allow fetching soft-deleted records only when explicitly requested
        filters: ChatAttachmentFilterInput
    ): [ChatAttachment]
    }

    input ChatAttachmentFilterInput {
    field: String
    value: String
    operator: String
}
    
type Mutation {
    putChatAttachment(input: CreateChatAttachmentInput!): ChatAttachment
    updateChatAttachment(input: UpdateChatAttachmentInput!): ChatAttachment
    # ✅ Soft Delete - Marks `isDeleted = true`
    softDeleteChatAttachment(input: SoftDeleteChatAttachmentInput!): ChatAttachment
        # @aws_auth(cognito_groups: ["SUPERADMIN", "ADMIN"])

    # ❌ Hard Delete - Restricted to SUPERADMIN Only
    deleteChatAttachment(id: ID!): ChatAttachment
        # @aws_auth(cognito_groups: ["SUPERADMIN"])
}
    
type Subscription {
    onPutChatAttachment: ChatAttachment @aws_subscribe(mutations: ["putChatAttachment"])
    onUpdateChatAttachment: ChatAttachment @aws_subscribe(mutations: ["updateChatAttachment"])
    onSoftDeleteChatAttachment: ChatAttachment @aws_subscribe(mutations: ["softDeleteChatAttachment"])
}
    