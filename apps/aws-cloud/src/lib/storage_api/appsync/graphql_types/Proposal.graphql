
type Proposal {
  id: ID!
  createdById: ID!
  proposalNumber: String
  paymentTerms: String
  title: String
  scope: String
  timeline: String
  qualifications: String
  approvalDate: AWSDateTime
  budget: Float
  lineItems: [AWSJSON]
  status: String
  date: AWSDateTime
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateProposalInput {
  createdById: ID!
  proposalNumber: String
  paymentTerms: String
  title: String
  scope: String
  timeline: String
  qualifications: String
  approvalDate: AWSDateTime
  budget: Float
  lineItems: [AWSJSON]
  status: String
  date: AWSDateTime
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateProposalInput {
  id: ID!
  createdById: ID!
  proposalNumber: String
  paymentTerms: String
  title: String
  scope: String
  timeline: String
  qualifications: String
  approvalDate: AWSDateTime
  budget: Float
  lineItems: [AWSJSON]
  status: String
  date: AWSDateTime
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteProposalInput {
  id: ID!
}

type Query {
    getProposal(id: ID!): Proposal
    
    queryProposals(
        limit: Int, 
        nextToken: String, 
        includeDeleted: Boolean = false,  # ✅ Allow fetching soft-deleted records only when explicitly requested
        filters: ProposalFilterInput
    ): [Proposal]
    }

    input ProposalFilterInput {
    field: String
    value: String
    operator: String
}
    
type Mutation {
    putProposal(input: CreateProposalInput!): Proposal
    updateProposal(input: UpdateProposalInput!): Proposal
    # ✅ Soft Delete - Marks `isDeleted = true`
    softDeleteProposal(input: SoftDeleteProposalInput!): Proposal
        # @aws_auth(cognito_groups: ["SUPERADMIN", "ADMIN"])

    # ❌ Hard Delete - Restricted to SUPERADMIN Only
    deleteProposal(id: ID!): Proposal
        # @aws_auth(cognito_groups: ["SUPERADMIN"])
}
    
type Subscription {
    onPutProposal: Proposal @aws_subscribe(mutations: ["putProposal"])
    onUpdateProposal: Proposal @aws_subscribe(mutations: ["updateProposal"])
    onSoftDeleteProposal: Proposal @aws_subscribe(mutations: ["softDeleteProposal"])
}
    