
type AdSchedule {
  id: ID!
  startTime: AWSDateTime
  endTime: AWSDateTime
  timeZone: String
  daysOfWeek: [String]
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateAdScheduleInput {
  startTime: AWSDateTime
  endTime: AWSDateTime
  timeZone: String
  daysOfWeek: [String]
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateAdScheduleInput {
  id: ID!
  startTime: AWSDateTime
  endTime: AWSDateTime
  timeZone: String
  daysOfWeek: [String]
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteAdScheduleInput {
  id: ID!
}

type Query {
    getAdSchedule(id: ID!): AdSchedule
    
    queryAdSchedules(
        limit: Int, 
        nextToken: String, 
        includeDeleted: Boolean = false,  # ✅ Allow fetching soft-deleted records only when explicitly requested
        filters: AdScheduleFilterInput
    ): [AdSchedule]
    }

    input AdScheduleFilterInput {
    field: String
    value: String
    operator: String
}
    
type Mutation {
    putAdSchedule(input: CreateAdScheduleInput!): AdSchedule
    updateAdSchedule(input: UpdateAdScheduleInput!): AdSchedule
    # ✅ Soft Delete - Marks `isDeleted = true`
    softDeleteAdSchedule(input: SoftDeleteAdScheduleInput!): AdSchedule
        # @aws_auth(cognito_groups: ["SUPERADMIN", "ADMIN"])

    # ❌ Hard Delete - Restricted to SUPERADMIN Only
    deleteAdSchedule(id: ID!): AdSchedule
        # @aws_auth(cognito_groups: ["SUPERADMIN"])
}
    
type Subscription {
    onPutAdSchedule: AdSchedule @aws_subscribe(mutations: ["putAdSchedule"])
    onUpdateAdSchedule: AdSchedule @aws_subscribe(mutations: ["updateAdSchedule"])
    onSoftDeleteAdSchedule: AdSchedule @aws_subscribe(mutations: ["softDeleteAdSchedule"])
}
    