type AdContent {
  id: ID!
  title: String
  bodyText: String
  mediaURL: String
  adType: String
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateAdContentInput {
  title: String
  bodyText: String
  mediaURL: String
  adType: String
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateAdContentInput {
  id: ID!
  title: String
  bodyText: String
  mediaURL: String
  adType: String
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteAdContentInput {
  id: ID!
}

type Query {
  getAdContent(id: ID!): AdContent

  queryAdContents(
    limit: Int
    nextToken: String
    includeDeleted: Boolean = false # ✅ Allow fetching soft-deleted records only when explicitly requested
    filters: AdContentFilterInput
  ): [AdContent]
}

input AdContentFilterInput {
  field: String
  value: String
  operator: String
}

type Mutation {
  putAdContent(input: CreateAdContentInput!): AdContent
  updateAdContent(input: UpdateAdContentInput!): AdContent
  # ✅ Soft Delete - Marks `isDeleted = true`
  softDeleteAdContent(input: SoftDeleteAdContentInput!): AdContent
  # @aws_auth(cognito_groups: ["SUPERADMIN", "ADMIN"])

  # ❌ Hard Delete - Restricted to SUPERADMIN Only
  deleteAdContent(id: ID!): AdContent
  # @aws_auth(cognito_groups: ["SUPERADMIN"])
}

type Subscription {
  onPutAdContent: AdContent @aws_subscribe(mutations: ["putAdContent"])
  onUpdateAdContent: AdContent @aws_subscribe(mutations: ["updateAdContent"])
  onSoftDeleteAdContent: AdContent
    @aws_subscribe(mutations: ["softDeleteAdContent"])
}
