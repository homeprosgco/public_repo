
type WorkScheduleEvent {
  id: ID!
  jobType: String
  customerId: String
  startTime: AWSDateTime
  endTime: AWSDateTime
  location: String
  status: String
  recurrence: String
  notes: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateWorkScheduleEventInput {
  jobType: String
  customerId: String
  startTime: AWSDateTime
  endTime: AWSDateTime
  location: String
  status: String
  recurrence: String
  notes: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateWorkScheduleEventInput {
  id: ID!
  jobType: String
  customerId: String
  startTime: AWSDateTime
  endTime: AWSDateTime
  location: String
  status: String
  recurrence: String
  notes: String
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteWorkScheduleEventInput {
  id: ID!
}

type Query {
    getWorkScheduleEvent(id: ID!): WorkScheduleEvent
    
    queryWorkScheduleEvents(
        limit: Int, 
        nextToken: String, 
        includeDeleted: Boolean = false,  # ✅ Allow fetching soft-deleted records only when explicitly requested
        filters: WorkScheduleEventFilterInput
    ): [WorkScheduleEvent]
    }

    input WorkScheduleEventFilterInput {
    field: String
    value: String
    operator: String
}
    
type Mutation {
    putWorkScheduleEvent(input: CreateWorkScheduleEventInput!): WorkScheduleEvent
    updateWorkScheduleEvent(input: UpdateWorkScheduleEventInput!): WorkScheduleEvent
    # ✅ Soft Delete - Marks `isDeleted = true`
    softDeleteWorkScheduleEvent(input: SoftDeleteWorkScheduleEventInput!): WorkScheduleEvent
        # @aws_auth(cognito_groups: ["SUPERADMIN", "ADMIN"])

    # ❌ Hard Delete - Restricted to SUPERADMIN Only
    deleteWorkScheduleEvent(id: ID!): WorkScheduleEvent
        # @aws_auth(cognito_groups: ["SUPERADMIN"])
}
    
type Subscription {
    onPutWorkScheduleEvent: WorkScheduleEvent @aws_subscribe(mutations: ["putWorkScheduleEvent"])
    onUpdateWorkScheduleEvent: WorkScheduleEvent @aws_subscribe(mutations: ["updateWorkScheduleEvent"])
    onSoftDeleteWorkScheduleEvent: WorkScheduleEvent @aws_subscribe(mutations: ["softDeleteWorkScheduleEvent"])
}
    