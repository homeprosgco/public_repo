import { Account, AccountProfile, BeneficiaryInput, CompanyProfileInput, CustomerInput, EstimateInput, ExpenseInput, InvoiceInput, ItemInput, JobInput, JobLeadInput, PaymentInput, ProjectInput, ProposalInput, ProspectInput, UserProfile, WorkServiceInput } from "@graphql-schema/*";
import { ServerContext } from "../_interface/server-context.interface";
export declare class AccountResolver {
    #private;
    allAccounts(ctx: ServerContext): Promise<AccountProfile[]>;
    account(ctx: ServerContext): Promise<Account>;
    accountProfile(ctx: ServerContext): Promise<AccountProfile>;
    accountId(ctx: ServerContext): Promise<{
        id: (string | null) | undefined;
    }>;
    accountsWithUsersGreaterThan(input: number, ctx: ServerContext): Promise<AccountProfile[]>;
    activeAccounts(ctx: ServerContext): Promise<AccountProfile[]>;
    beneficiaries(account: Account, ctx: ServerContext): Promise<void>;
    beneficiariesByCustomerId(account: Account, customerId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Beneficiary[]>;
    beneficiaryLastAdded(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Beneficiary>;
    benficairyLastUpdated(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Beneficiary>;
    companyProfile(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").CompanyProfile>;
    customers(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Customer[]>;
    customerById(account: Account, customerId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Customer>;
    customersByType(account: Account, customerType: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Customer[]>;
    customerLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Customer>;
    customerLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Customer>;
    estimates(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate[]>;
    estimateById(account: Account, estimateId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate>;
    estimatesCreatedBy(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate[]>;
    estimatesByProspectId(account: Account, prospectId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate[]>;
    estimatesByJobLeadId(account: Account, jobLeadId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate[]>;
    estimateByProposalId(account: Account, proposalId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate[]>;
    estimateByNumber(account: Account, number: number, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate>;
    estimatesByStatus(account: Account, estimateStatus: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate[]>;
    estimateByReferenceId(account: Account, referenceId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate>;
    estimatesByCategory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate[]>;
    estimateLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate>;
    estimateLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Estimate>;
    expenses(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Expense[]>;
    expenseById(account: Account, expenseId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Expense>;
    expensesByCategory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Expense[]>;
    expensesCreatedBy(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Expense[]>;
    expenseLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Expense>;
    expenseLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Expense>;
    items(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Item[]>;
    itemById(account: Account, itemId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Item>;
    itemsByCatgory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Item[]>;
    itemBySku(account: Account, sku: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Item>;
    itemLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Item>;
    itemLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Item>;
    invoices(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByCustomerId(account: Account, customerId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoiceById(account: Account, invoiceId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice>;
    invoicesCreatedBy(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByEstimateId(account: Account, estimateId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByProspectId(account: Account, prospectId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByJobId(account: Account, jobId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByJobLeadId(account: Account, jobLeadId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByProposalId(account: Account, proposalId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByProjectId(account: Account, projectId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoiceByNumber(account: Account, number: number, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice>;
    invoicesByStatus(account: Account, invoiceStatus: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByReferenceId(account: Account, referenceId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoicesByCategory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice[]>;
    invoiceLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice>;
    invoiceLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Invoice>;
    jobs(ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobsByCategory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobsByCustomer(account: Account, customerId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobsByEstimateId(account: Account, estimateId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobById(account: Account, jobId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job>;
    jobsByStatus(account: Account, jobStatus: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobsCreatedBy(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobsByJobLead(account: Account, jobLeadId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobsByJobManager(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobByPoNumber(account: Account, poNumber: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Job[]>;
    jobLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Job>;
    jobLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Job>;
    jobLeads(ctx: ServerContext): Promise<import("@graphql-schema/*").JobLead[]>;
    jobLeadById(account: Account, jobLeadId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").JobLead>;
    jobLeadsByStatus(account: Account, status: string, ctx: ServerContext): Promise<import("@graphql-schema/*").JobLead[]>;
    jobLeadsCreatedBy(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").JobLead[]>;
    jobLeadsByCategory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").JobLead[]>;
    jobLeadLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").JobLead>;
    jobLeadLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").JobLead>;
    owner(account: Account, ctx: ServerContext): Promise<UserProfile>;
    payments(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment[]>;
    paymentById(account: Account, paymentId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment>;
    paymentsByDirection(account: Account, direction: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment[]>;
    paymentsByReferenceId(account: Account, referenceId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment[]>;
    paymentsByReferenceType(account: Account, referenceType: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment[]>;
    paymentsCreatedBy(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment[]>;
    paymentsFor(account: Account, paymentFor: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment[]>;
    paymentsTo(account: Account, entityName: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Payment[]>;
    paymentLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Payment>;
    paymentLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Payment>;
    profile(account: Account, ctx: ServerContext): Promise<AccountProfile>;
    projects(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectById(account: Account, projectId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project>;
    projectsByCategory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectsByCustomerId(account: Account, customerId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectsCreatedBy(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectsByJobLeadId(account: Account, jobLeadId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectsByProjectManager(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectsByReferenceId(account: Account, referenceId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectsWithTeamMember(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectsWithFieldTeamMember(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Project[]>;
    projectLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Project>;
    projectLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Project>;
    proposals(ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal[]>;
    proposalById(account: Account, proposalId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal>;
    proposalsByJobLeadId(account: Account, jobLeadId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal[]>;
    proposalsByStatus(account: Account, proposalStatus: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal[]>;
    proposalsCreatedBy(account: Account, userId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal[]>;
    proposalsByReferenceId(account: Account, referenceId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal[]>;
    proposalLastAdded(ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal>;
    proposalLastUpdated(ctx: ServerContext): Promise<import("@graphql-schema/*").Proposal>;
    prospects(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Prospect[]>;
    prospectById(account: Account, prospectId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").Prospect>;
    prospectLastAdded(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Prospect>;
    prospectLastUpdated(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").Prospect>;
    workServices(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").WorkService[]>;
    workServiceById(account: Account, workServiceId: string, ctx: ServerContext): Promise<import("@graphql-schema/*").WorkService>;
    workServicesByCategory(account: Account, category: string, ctx: ServerContext): Promise<import("@graphql-schema/*").WorkService[]>;
    workServiceLastAdded(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").WorkService>;
    workServiceLastUpdated(account: Account, ctx: ServerContext): Promise<import("@graphql-schema/*").WorkService>;
    seedTeamMembers(ctx: ServerContext): Promise<Account[]>;
    setActiveAccounts(ctx: ServerContext): Promise<AccountProfile[]>;
    createCompanyProfile(companyProfileInput: CompanyProfileInput, ctx: ServerContext): Promise<Account>;
    updateCompanyProfile(companyProfileIdInput: string, companyProfileInput: CompanyProfileInput, ctx: ServerContext): Promise<Account>;
    removeCompanyProfile(companyProfileIdInput: string, ctx: ServerContext): Promise<Account>;
    addTeamMember(userId: string, ctx: ServerContext): Promise<Account>;
    addProspect(prospectInput: ProspectInput, ctx: ServerContext): Promise<Account>;
    convertProspectToCustomer(prospectId: string, ctx: ServerContext): Promise<Account>;
    updateProspect(prospectIdInput: string, prospectInput: ProspectInput, ctx: ServerContext): Promise<Account>;
    removeProspect(prospectId: string, ctx: ServerContext): Promise<Account>;
    addCustomer(customerInput: CustomerInput, ctx: ServerContext): Promise<Account>;
    removeCustomer(customerIdInput: string, ctx: ServerContext): Promise<Account>;
    updateCustomer(customerIdInput: string, customerInput: CustomerInput, ctx: ServerContext): Promise<Account>;
    addBeneficiary(beneficiaryInput: BeneficiaryInput, ctx: ServerContext): Promise<Account>;
    removeBeneficiary(beneficiaryIdInput: string, ctx: ServerContext): Promise<Account>;
    updateBeneficiary(beneficiaryIdInput: string, beneficiaryInput: BeneficiaryInput, ctx: ServerContext): Promise<Account>;
    createJobLead(jobLeadInput: JobLeadInput, ctx: ServerContext): Promise<Account>;
    updateJobLead(jobLeadIdInput: string, jobLeadInput: JobLeadInput, ctx: ServerContext): Promise<Account>;
    removeJobLead(jobLeadIdInput: string, ctx: ServerContext): Promise<Account>;
    createItem(itemInput: ItemInput, ctx: ServerContext): Promise<Account>;
    updateItem(itemIdInput: string, itemInput: ItemInput, ctx: ServerContext): Promise<Account>;
    removeItem(itemIdInput: string, ctx: ServerContext): Promise<Account>;
    createWorkService(workServiceInput: WorkServiceInput, ctx: ServerContext): Promise<Account>;
    updateWorkService(workServiceIdInput: string, workServiceInput: WorkServiceInput, ctx: ServerContext): Promise<Account>;
    removeWorkService(workServiceIdInput: string, ctx: ServerContext): Promise<Account>;
    createProposal(proposalInput: ProposalInput, ctx: ServerContext): Promise<Account>;
    updateProposal(proposalIdInput: string, proposalInput: ProposalInput, ctx: ServerContext): Promise<Account>;
    removeProposal(proposalIdInput: string, ctx: ServerContext): Promise<Account>;
    addEstimate(estimateInput: EstimateInput, ctx: ServerContext): Promise<Account>;
    updateEstimate(estimateIdInput: string, estimateInput: EstimateInput, ctx: ServerContext): Promise<Account>;
    removeEstimate(estimateIdInput: string, ctx: ServerContext): Promise<Account>;
    createJob(jobInput: JobInput, ctx: ServerContext): Promise<Account>;
    updateJob(jobIdInput: string, jobInput: JobInput, ctx: ServerContext): Promise<Account>;
    removeJob(jobIdInput: string, ctx: ServerContext): Promise<Account>;
    createProject(projectInput: ProjectInput, ctx: ServerContext): Promise<Account>;
    updateProject(projectIdInput: string, projectInput: ProjectInput, ctx: ServerContext): Promise<Account>;
    removeProject(projectIdInput: string, ctx: ServerContext): Promise<Account>;
    addInvoice(invoiceInput: InvoiceInput, ctx: ServerContext): Promise<Account>;
    updateInvoice(invoiceIdInput: string, invoiceInput: InvoiceInput, ctx: ServerContext): Promise<Account>;
    removeInvoice(invoiceIdInput: string, ctx: ServerContext): Promise<Account>;
    createExpense(expenseInput: ExpenseInput, ctx: ServerContext): Promise<Account>;
    removeExpense(expenseIdInput: string, ctx: ServerContext): Promise<Account>;
    updateExpense(expenseIdInput: string, expenseInput: ExpenseInput, ctx: ServerContext): Promise<Account>;
    createPayment(paymentInput: PaymentInput, ctx: ServerContext): Promise<Account>;
    removePayment(paymentIdInput: string, ctx: ServerContext): Promise<Account>;
    updatePayment(paymentIdInput: string, paymentInput: PaymentInput, ctx: ServerContext): Promise<Account>;
}
