
type SubscriptionPlan {
  id: ID!
  tenant: Tenant @belongsTo
  planName: String
  price: Float
  features: [String]
  billingCycle: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean!
}
input CreateSubscriptionPlanInput {
  tenant: Tenant
  planName: String
  price: Float
  features: [String]
  billingCycle: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean = false
}
input UpdateSubscriptionPlanInput {
  id: ID!
  tenant: Tenant
  planName: String
  price: Float
  features: [String]
  billingCycle: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  created: AWSDateTime
  updated: AWSDateTime
  isDeleted: Boolean
}
input SoftDeleteSubscriptionPlanInput {
  id: ID!
}

input SubscriptionPlanFilterInput {
  field: String
  value: String
  operator: String
}
type Query {
  getSubscriptionPlan(id: ID!): SubscriptionPlan
  querySubscriptionPlans(
    limit: Int, 
    nextToken: String, 
    includeDeleted: Boolean = false,
    filters: SubscriptionPlanFilterInput
  ): [SubscriptionPlan]
}
type Mutation {
  putSubscriptionPlan(input: CreateSubscriptionPlanInput!): SubscriptionPlan
  updateSubscriptionPlan(input: UpdateSubscriptionPlanInput!): SubscriptionPlan
  softDeleteSubscriptionPlan(input: SoftDeleteSubscriptionPlanInput!): SubscriptionPlan
  deleteSubscriptionPlan(id: ID!): SubscriptionPlan
}
type Subscription {
  onPutSubscriptionPlan: SubscriptionPlan @aws_subscribe(mutations: ["putSubscriptionPlan"])
  onUpdateSubscriptionPlan: SubscriptionPlan @aws_subscribe(mutations: ["updateSubscriptionPlan"])
  onSoftDeleteSubscriptionPlan: SubscriptionPlan @aws_subscribe(mutations: ["softDeleteSubscriptionPlan"])
}